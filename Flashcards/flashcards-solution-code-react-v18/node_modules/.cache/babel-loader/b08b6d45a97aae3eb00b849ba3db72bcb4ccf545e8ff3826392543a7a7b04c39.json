{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: {\n    cards: {}\n  },\n  reducers: {\n    addCard: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      state.cards[id] = action.payload;\n      //The selected code state.cards[id] = action.payload; \n      //adds a card to the cards object in the state. It does \n      //this by using the id from action.payload as the key and\n      //setting the corresponding value to the entire action.payload \n      //object. This updates cards with new card details.\n    }\n  }\n});\n\n//This function adds a new card to the state. It takes state \n//and action as parameters. The card’s id is extracted from action.payload \n//and used as a key to store action.payload in the state.cards object. This \n//way, a new card is added or an existing one is updated in the state.\n\nexport const {\n  addCard\n} = cardsSlice.actions;\nexport const selectCardById = id => state => state.cards.cards[id];\n//The selected code defines a function selectCardById that takes an id as \n//an argument. This function returns another function that accepts state \n//and retrieves a card from state.cards.cards using the provided id. \n//This helps to easily access specific cards by their id.\nexport default cardsSlice.reducer;","map":{"version":3,"names":["createSlice","cardsSlice","name","initialState","cards","reducers","addCard","state","action","id","payload","actions","selectCardById","reducer"],"sources":["C:/Program Files (x86)/Visual Studio Code/Coding Projects/Flashcards/flashcards-solution-code-react-v18/src/features/cards/cardsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const cardsSlice = createSlice({\r\n  name: \"cards\",\r\n  initialState: {\r\n    cards: {}\r\n  },\r\n  reducers: {\r\n    addCard: (state, action) => {\r\n      const { id } = action.payload;\r\n      state.cards[id] = action.payload;\r\n      //The selected code state.cards[id] = action.payload; \r\n      //adds a card to the cards object in the state. It does \r\n      //this by using the id from action.payload as the key and\r\n      //setting the corresponding value to the entire action.payload \r\n      //object. This updates cards with new card details.\r\n    }\r\n  }\r\n});\r\n\r\n//This function adds a new card to the state. It takes state \r\n//and action as parameters. The card’s id is extracted from action.payload \r\n//and used as a key to store action.payload in the state.cards object. This \r\n//way, a new card is added or an existing one is updated in the state.\r\n\r\nexport const { addCard } = cardsSlice.actions;\r\nexport const selectCardById = (id) => (state) => state.cards.cards[id];\r\n//The selected code defines a function selectCardById that takes an id as \r\n//an argument. This function returns another function that accepts state \r\n//and retrieves a card from state.cards.cards using the provided id. \r\n//This helps to easily access specific cards by their id.\r\nexport default cardsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;EACpCE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,CAAC;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1B,MAAM;QAAEC;MAAG,CAAC,GAAGD,MAAM,CAACE,OAAO;MAC7BH,KAAK,CAACH,KAAK,CAACK,EAAE,CAAC,GAAGD,MAAM,CAACE,OAAO;MAChC;MACA;MACA;MACA;MACA;IACF;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA,OAAO,MAAM;EAAEJ;AAAQ,CAAC,GAAGL,UAAU,CAACU,OAAO;AAC7C,OAAO,MAAMC,cAAc,GAAIH,EAAE,IAAMF,KAAK,IAAKA,KAAK,CAACH,KAAK,CAACA,KAAK,CAACK,EAAE,CAAC;AACtE;AACA;AACA;AACA;AACA,eAAeR,UAAU,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}